/*
   This file was generated automatically by the Mojo IDE version B1.3.5.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module mojo_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input cclk,
    output reg spi_miso,
    input spi_ss,
    input spi_mosi,
    input spi_sck,
    output reg [3:0] spi_channel,
    input avr_tx,
    output reg avr_rx,
    input avr_rx_busy,
    input [4:0] btn,
    output reg [7:0] ledio,
    output reg [2:0] ledr,
    input btn5
  );
  
  
  
  reg rst;
  
  integer i;
  
  integer delay;
  
  integer aState;
  
  integer bState;
  
  integer cState;
  
  integer dState;
  
  integer eState;
  
  integer modeState;
  
  integer easyMode;
  
  integer mediumMode;
  
  integer hardMode;
  
  reg [7:0] out;
  
  localparam EASY_s = 2'd0;
  localparam MID_s = 2'd1;
  localparam HARD_s = 2'd2;
  
  reg [1:0] M_s_d, M_s_q = EASY_s;
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_1 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  
  always @* begin
    M_s_d = M_s_q;
    
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    led = 8'h00;
    spi_miso = 1'bz;
    spi_channel = 4'bzzzz;
    avr_rx = 1'bz;
    if (btn[0+0-:1] == 1'h0) begin
      if (aState == 1'h1) begin
        aState = 1'h0;
      end else begin
        if (aState == 1'h0) begin
          aState = 1'h1;
        end
      end
    end
    if (btn[1+0-:1] == 1'h0) begin
      if (bState == 1'h1) begin
        bState = 1'h0;
      end else begin
        if (bState == 1'h0) begin
          bState = 1'h1;
        end
      end
    end
    if (btn[2+0-:1] == 1'h0) begin
      if (cState == 1'h1) begin
        cState = 1'h0;
      end else begin
        if (cState == 1'h0) begin
          cState = 1'h1;
        end
      end
    end
    if (btn[3+0-:1] == 1'h0) begin
      if (dState == 1'h1) begin
        dState = 1'h0;
      end else begin
        if (dState == 1'h0) begin
          dState = 1'h1;
        end
      end
    end
    if (btn[4+0-:1] == 1'h0) begin
      if (eState == 1'h1) begin
        eState = 1'h0;
      end else begin
        if (eState == 1'h0) begin
          eState = 1'h1;
        end
      end
    end
    out[0+0-:1] = bState ^ cState ^ dState;
    out[1+0-:1] = aState ^ cState;
    out[2+0-:1] = eState;
    out[3+0-:1] = aState ^ dState;
    out[4+0-:1] = aState ^ bState;
    out[5+0-:1] = eState;
    out[6+0-:1] = cState ^ dState ^ eState;
    out[7+0-:1] = bState;
    ledio[0+0-:1] = out[0+0-:1];
    ledio[1+0-:1] = out[1+0-:1];
    ledio[2+0-:1] = out[2+0-:1];
    ledio[3+0-:1] = out[3+0-:1];
    ledio[4+0-:1] = out[4+0-:1];
    ledio[5+0-:1] = out[5+0-:1];
    ledio[6+0-:1] = out[6+0-:1];
    ledio[7+0-:1] = out[7+0-:1];
    ledr[0+0-:1] = hardMode;
    ledr[1+0-:1] = mediumMode;
    ledr[2+0-:1] = easyMode;
    
    case (M_s_q)
      EASY_s: begin
        if (btn5 == 1'h0) begin
          easyMode = 1'h1;
          mediumMode = 1'h0;
          hardMode = 1'h0;
          M_s_d = MID_s;
          aState = 1'h0;
          bState = 1'h0;
          cState = 1'h0;
          dState = 1'h0;
          eState = 1'h0;
        end
      end
      MID_s: begin
        if (btn5 == 1'h0) begin
          easyMode = 1'h0;
          mediumMode = 1'h1;
          hardMode = 1'h0;
          M_s_d = HARD_s;
          aState = 1'h0;
          bState = 1'h0;
          cState = 1'h0;
          dState = 1'h0;
          eState = 1'h0;
        end
      end
      HARD_s: begin
        if (btn5 == 1'h0) begin
          easyMode = 1'h0;
          mediumMode = 1'h0;
          hardMode = 1'h1;
          M_s_d = EASY_s;
          aState = 1'h0;
          bState = 1'h0;
          cState = 1'h0;
          dState = 1'h0;
          eState = 1'h0;
        end
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_s_q <= 1'h0;
    end else begin
      M_s_q <= M_s_d;
    end
  end
  
endmodule
